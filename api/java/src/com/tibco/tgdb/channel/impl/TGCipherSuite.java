/**
 * Copyright 2019 TIBCO Software Inc.
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); You may not use this file except
 * in compliance with the License.
 * A copy of the License is included in the distribution package with this file.
 * You also may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * <p/>
 * File name : TGCipherSuite.java
 * Created on: 4/5/18
 * Created by: suresh
 * <p/>
 * SVN Id: $Id: TGCipherSuite.java 3158 2019-04-26 20:49:24Z kattaylo $
 *
 * This file was generated by downloading https://testssl.sh/openssl-rfc.mapping.html and converting into a text file.
 * Furthermore only TLSv1.2 supported ciphers from OpenSSL were used for filtering
 */


package com.tibco.tgdb.channel.impl;


import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.util.ArrayList;
import java.util.List;
import java.util.function.Consumer;
import java.util.stream.Stream;

public enum TGCipherSuite {
/*
    TLS_ECDHE_ECDSA_AES256_GCM_SHA384
            (0xC0, 0x2C, "ECDHE-ECDSA-AES256-GCM-SHA384", "TLSv1.2", "Kx=ECDH Au=ECDSA Enc=AESGCM(256) Mac=AEAD"),
    
    TLS_ECDHE_RSA_AES256_GCM_SHA384
            (0xC0, 0x30, "ECDHE-RSA-AES256-GCM-SHA384", "TLSv1.2", "Kx=ECDH Au=RSA Enc=AESGCM(256) Mac=AEAD"),

    TLS_DHE_RSA_AES256_GCM_SHA384
            (0x00, 0x9F, "DHE-RSA-AES256-GCM-SHA384", "TLSv1.2", "Kx=DH Au=RSA Enc=AESGCM(256) Mac=AEAD"),

    TLS_ECDHE_ECDSA_CHACHA20_POLY1305
            (0xCC, 0xA9, "ECDHE-ECDSA-CHACHA20-POLY1305", "TLSv1.2", "Kx=ECDH Au=ECDSA Enc=CHACHA20/POLY1305(256) Mac=AEAD"),

    TLS_ECDHE_RSA_CHACHA20_POLY1305
            (0xCC, 0xA8, "ECDHE-RSA-CHACHA20-POLY1305", "TLSv1.2", "Kx=ECDH Au=RSA Enc=CHACHA20/POLY1305(256) Mac=AEAD"),

    TLS_DHE_RSA_CHACHA20_POLY1305
            (0xCC, 0xAA, "DHE-RSA-CHACHA20-POLY1305", "TLSv1.2", "Kx=DH Au=RSA Enc=CHACHA20/POLY1305(256) Mac=AEAD"),

    TLS_ECDHE_ECDSA_AES128_GCM_SHA256
            (0xC0, 0x2B, "ECDHE-ECDSA-AES128-GCM-SHA256", "TLSv1.2", "Kx=ECDH Au=ECDSA Enc=AESGCM(128) Mac=AEAD"),

    TLS_ECDHE_RSA_AES128_GCM_SHA256
            (0xC0, 0x2F, "ECDHE-RSA-AES128-GCM-SHA256", "TLSv1.2", "Kx=ECDH Au=RSA Enc=AESGCM(128) Mac=AEAD"),

    TLS_DHE_RSA_AES128_GCM_SHA256
            (0x00, 0x9E, "DHE-RSA-AES128-GCM-SHA256", "TLSv1.2", "Kx=DH Au=RSA Enc=AESGCM(128) Mac=AEAD"),

    TLS_ECDHE_ECDSA_AES256_SHA384
            (0xC0, 0x24, "ECDHE-ECDSA-AES256-SHA384", "TLSv1.2", "Kx=ECDH Au=ECDSA Enc=AES(256) Mac=SHA384"),

    TLS_ECDHE_RSA_AES256_SHA384
            (0xC0, 0x28, "ECDHE-RSA-AES256-SHA384", "TLSv1.2", "Kx=ECDH Au=RSA Enc=AES(256) Mac=SHA384"),

    TLS_DHE_RSA_AES256_SHA256
            (0x00, 0x6B, "DHE-RSA-AES256-SHA256", "TLSv1.2", "Kx=DH Au=RSA Enc=AES(256) Mac=SHA256"),

    TLS_ECDHE_ECDSA_AES128_SHA256
            (0xC0, 0x23, "ECDHE-ECDSA-AES128-SHA256", "TLSv1.2", "Kx=ECDH Au=ECDSA Enc=AES(128) Mac=SHA256"),

    TLS_ECDHE_RSA_AES128_SHA256
            (0xC0, 0x27, "ECDHE-RSA-AES128-SHA256", "TLSv1.2", "Kx=ECDH Au=RSA Enc=AES(128) Mac=SHA256"),

    TLS_DHE_RSA_AES128_SHA256
            (0x00, 0x67, "DHE-RSA-AES128-SHA256", "TLSv1.2", "Kx=DH Au=RSA Enc=AES(128) Mac=SHA256"),

    TLS_AES256_GCM_SHA384
            (0x00, 0x9D, "AES256-GCM-SHA384", "TLSv1.2", "Kx=RSA Au=RSA Enc=AESGCM(256) Mac=AEAD"),

    TLS_AES128_GCM_SHA256
            (0x00, 0x9C, "AES128-GCM-SHA256", "TLSv1.2", "Kx=RSA Au=RSA Enc=AESGCM(128) Mac=AEAD"),

    TLS_AES256_SHA256
            (0x00, 0x3D, "AES256-SHA256", "TLSv1.2", "Kx=RSA Au=RSA Enc=AES(256) Mac=SHA256"),

    TLS_AES128_SHA256
            (0x00, 0x3C, "AES128-SHA256", "TLSv1.2", "Kx=RSA Au=RSA Enc=AES(128) Mac=SHA256"),
*/


        TLS_RSA_WITH_AES_128_CBC_SHA256
                (0x3c,"AES128-SHA256","RSA","AES","128"),

        TLS_RSA_WITH_AES_256_CBC_SHA256
                (0x3d,"AES256-SHA256","RSA","AES","256"),

        TLS_DHE_RSA_WITH_AES_128_CBC_SHA256
                (0x67,"DHE-RSA-AES128-SHA256","DH","AES","128"),

        TLS_DHE_RSA_WITH_AES_256_CBC_SHA256
                (0x6b,"DHE-RSA-AES256-SHA256","DH","AES","256"),

        TLS_RSA_WITH_AES_128_GCM_SHA256
                (0x9c,"AES128-GCM-SHA256","RSA","AESGCM","128"),

        TLS_RSA_WITH_AES_256_GCM_SHA384
                (0x9d,"AES256-GCM-SHA384","RSA","AESGCM","256"),

        TLS_DHE_RSA_WITH_AES_128_GCM_SHA256
                (0x9e,"DHE-RSA-AES128-GCM-SHA256","DH","AESGCM","128"),

        TLS_DHE_RSA_WITH_AES_256_GCM_SHA384
                (0x9f,"DHE-RSA-AES256-GCM-SHA384","DH","AESGCM","256"),

        TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256
                (0xc023,"ECDHE-ECDSA-AES128-SHA256","ECDH","AES","128"),

        TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384
                (0xc024,"ECDHE-ECDSA-AES256-SHA384","ECDH","AES","256"),

        TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256
                (0xc027,"ECDHE-RSA-AES128-SHA256","ECDH","AES","128"),

        TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384
                (0xc028,"ECDHE-RSA-AES256-SHA384","ECDH","AES","256"),

        TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
                (0xc02b,"ECDHE-ECDSA-AES128-GCM-SHA256","ECDH","AESGCM","128"),

        TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
                (0xc02c,"ECDHE-ECDSA-AES256-GCM-SHA384","ECDH","AESGCM","256"),

        TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
                (0xc02f,"ECDHE-RSA-AES128-GCM-SHA256","ECDH","AESGCM","128"),

        TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
                (0xc030,"ECDHE-RSA-AES256-GCM-SHA384","ECDH","AESGCM","256"),

        TLS_INVALID_CIPHER (0,null,null,null,null);

    
    int suiteId;
    String opensslName; //OpenSSL Name.
    String keyExch;
    String encryption;
    String bits;

    TGCipherSuite(int suiteId, String opensslName, String keyExch, String encryption, String bits)
    {
        this.suiteId  = suiteId;
        this.opensslName = opensslName;
        this.keyExch = keyExch;
        this.encryption = encryption;
        this.bits = bits;
    }

    public static TGCipherSuite getCipherSuite(String nameoralias)
    {
        for (TGCipherSuite cipherSuite : TGCipherSuite.values()) {
            if ((nameoralias.equalsIgnoreCase(cipherSuite.name())) ||
                    (nameoralias.equalsIgnoreCase(cipherSuite.opensslName)))
                return cipherSuite;
        }

        return TLS_INVALID_CIPHER;
    }


    public static String[] filterSuites(String[] suites) {
        List<String> supportedSuites = new ArrayList<>();
        for (String suite:suites) {
            System.out.println(suite);
            TGCipherSuite cs = TGCipherSuite.getCipherSuite(suite);
            if (cs != TLS_INVALID_CIPHER) supportedSuites.add(suite);
        }
        return supportedSuites.toArray(new String[0]);
    }

    public static void main(String[] args) throws Exception {
        LineNumberReader lnr = new LineNumberReader(new InputStreamReader(new FileInputStream("/Users/suresh/Downloads/openssl-rfc.mapping.html")));
        Stream<String> linestream = lnr.lines();
        System.out.println("public enum TGCipherSuite {");
        linestream.forEach(new Consumer<String>() {
            @Override
            public void accept(String s) {

                if (s.startsWith("[")) {
                    String tokens[] = s.split("\\|");
                    String sslname = tokens[1].trim();
                    if (TGCipherSuite.getCipherSuite(sslname) != TLS_INVALID_CIPHER) {
                        String cipherId = tokens[0].substring(1, tokens[0].length()-1);
                        String keyExch = tokens[2].trim();
                        String encryption = tokens[3].trim();
                        String bits = tokens[4].trim();
                        String rfcName = tokens[5].trim();
                        System.out.printf("%s\n\t(%s,\"%s\",\"%s\",\"%s\",\"%s\"),\n\n",rfcName, cipherId,  sslname, keyExch, encryption, bits);
                    }
                }
            }
        });

        System.out.println("TLS_INVALID_CIPHER (0,null,null,null,null);");
        System.out.println("}");

    }
}
