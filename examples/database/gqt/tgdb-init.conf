#
#  Copyright 2016-2021 TIBCO Software Inc. All rights reserved.
#
#  Licensed under the Apache License, Version 2.0 (the "License"); You may not use this file except
#  in compliance with the License.
#  A copy of the License is included in the distribution package with this file.
#  You also may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

#  File name : tgdb-init.conf
#  Created on: Nov 8, 2021
#  Created by: Sneha Bangar
#  SVN Id    : $Id: $
#
#  Configuration file for TIBCO Graph Database Server. This configuration is used to specify server resource
#  availabilities such as memory, network, logger, io.
#

# Main tgdb section. If this section is absent, then parsing fails.
# name      : name of the server. The log file uses the server name as part of the log file name.
# locale    : The server locale. This locale is used for all the databases managed by this server as of this current
#             release.
# timezone              : The server default timezone. This timezone is used as the default for all connections made to
#                         the databases managed by this server (only used if the clients do not specify another local
#                         timezone). Specified by the IANA-standardized name.
# timezone.jump.error   : The error message that the server should send back to the clients if the clients specified a
#                         time during a jump-ahead transition (for example, should the server error if the local
#                         timezone is America/Los_Angeles and the local date-time is 2:30 AM Sunday, 8th March 2020,
#                         should the server ignore the invalid time, or return an error status?). Options are FAIL
#                         (which is the default) and ADJUST.
# timezone.zoneinfo.path: The path to the IANA zoneinfo directory with the Olson TZif files. On UNIX and UNIX-like
#                         systems, this path should be /usr/share/zoneinfo. There is no such default path on Windows.
#                         If not specified, then if this is UNIX or UNIX-like, then it will use the /usr/share/zoneinfo
#                         directory as default, but if this is Windows system, then will use Window's built-in time zone
#                         management system (note, for best support for timezones, we recommend that you download and
#                         set the timezone.zoneinfo.path to the downloaded location)
# acl.token.expire      : The server-wide expiration interval for access control list tokens. Valid post-fixes are 's'
#                         for seconds, 'm' for minutes, 'h' for hours, and 'd' for days. Default is 1 hour.
#                         To ignore ACL token expiration (NOT recommended), set this field equal to "none".
[tgdb]
name                = demoprimary
locale              = en_US.UTF-8
timezone            = America/Los_Angeles
timezone.jump.error = FAIL
# timezone.zoneinfo.path = /usr/share/zoneinfo      # Commented out because not all systems (Windows) have the zoneinfo
                                                    # directory, and definitely not all would have the same path.
acl.token.expire    = none

# Memory configuration Section
# memory            : The memory allocated for the engine in GB. This includes Data Cache, Index Cache, Live Txns etc.
#                     Memory is specified as pair of (min,max). Minimum is 1GB, and Maximum is the max allowed Memory
#                     on the machine. TGDB can support upto 256TB (2^48) if OS supports it.
#                     The minimum will be used by the initdb process, and the maximum by the server process.
#                     Alway's ensure that the minimum required is sufficient to initialize database with catalogue
#                     information.
# cacheSize         : The percentage of the memory to be used as Cache memory. The remaining is working memory used for
#                     Transaction processing, Serialization/Deserialization of Request-Response, Cursor management,
#                     Admin commands. The database section in each respective config's specifies how much should be
#                     allocated per cache type per database.
# sharedmemory      : Shared Memory Area - This is for Write-Ahead Transaction log (wal/redo) entries, and other system
#                     administrative tasks such as Backups . Minimum is 1G.
# shmpath           : The path to shared memory file used for WAL and other stuff. The file name is server name + .shm
# enableHugePages   : Boolean value.  This flag is only for Linux. Please see the kernel documentation for huge pages
#                     https://www.kernel.org/doc/Documentation/vm/hugetlbpage.txt
[memory]
memory          = 8, 8
sharedmemory    = 1
shmpath         = ../data/shm
cacheSize       = 90
enableHugePages = false

# IO config section. System specific IO configuration.
# useOsCache        : Boolean value. Enables the read/writes call to use OS cache for file io.
#                     Some file system allows to by-pass the OS cache by using O_DIRECT open flags.
#                     Setting it to false reclaims valuable memory.
#                     Furthermore the system provides its own cache for database segments.
# writethrough      : Boolean value. Write through provides an option to let the OS to tell the disk driver to flush its
#                     cache to physical storage media.
#                     Not all OS supports it.
#                     For NFS, and certain Linux file system (ext4), check with Administrator on mount options.
# synctype          : Specify how to sync the data to the driver/disk cache.
#                     None  - do not sync, buffer it and let OS decide when to write. Fastest.
#                             Can lose data on power failure. This setting ignores useOsCache and writethrough settings
#                     Data  - Only sync the data that was change. Metadata such as accesstime, creation time, and
#                             other file related info are not written.
#                             Slow. Pages are committed to disk before call returns. Survives power failure
#                     Range - sync only the range of data that has been written - Slow.
#                             Pages are committed to disk before return. Survives power failure
#                             Only Linux supports.
#                     All   - sync the data and metadata - Slow. This helps data integrity, but lowers performance
#                             significantly. Pages are committed to disk before return. Survives power failure
[io]
useOsCache      = true
writethrough    = false
synctype        = None

# Processors configuration section.
# Each task processor has its own thread and queue to process incoming message.
# A Task Processor has core affinity. Task scheduler can dispatch message either in round-robin or with an affinity based
# on some key in the message. Transaction have affinity and stickiness to a task processor
#                 Txn Processor, and is based on the client session-id.
#                 Configure it according to system needs - OLTP (write heavy) or Analytical(read heavy)
# numprocessors : The physical number of cores in the system, that the system is allowed to take.  The database config
#                 processors section will specify a percentage of it
# queueDepth    : Nos of outstanding transaction/queries to be processed in a processor queue.

[processors]
numprocessors   = 8
queueDepth      = 16

# Specify the databases that this server manages.
# Format is name=configfile where name is name of the database, and configfile is the database configuration file.
# For EE the maximum of database that server can manages depends on the machine configuration.
# For CE, Only 1 database can be managed, excluding the defaultdb.conf.
# If more than one config file specified points to the same database, only one will be loaded, and will report an error
# opening the database on others
[databases]
demodb  = ./demodb.conf
#routesdb = ../examples/routes/routesdb.conf
#tracedb = ../examples/trace/tracedb.conf
#housedb = ../examples/hierarchy/housedb.conf
gqtdb = ../examples/gqt/gqtdb.conf

# Log section. The log files are created in the path specified. The file name for the logs  <servername>[_nnnn].log
# The current/latest log file is always with .log extensions. Rollover logs are labelled .0, .1, ... increasing order.
# The latest logs are in the descending order. Log Properties and its meaning are defined below.
# level     : level:component pair list, where multiple components per level are supported.
#             Supported log levels: error,warn,info,user,debug,debugfine,debugfiner
#             Supported components: core.all,graph.all,pdu.all,sec.all,cuda.all,txn.all,storage.all,admin.all,main.all
#             For a full list of supported components please see: https://confluence.tibco.com/display/TGDB/2.2.10+Logging
#             Example value: info:*;debug:core.all,server.main;warn:admin.all
# path      : The path of the logfile. The log file name is <engine-name>_<database-name>.log[N]
# size      : Size of each log file in MB
# count     : Nos of log files to generate, before it rolls overs.
# console   : Output the logs onto console. Errors will be displayed irrespectively.
[logger]
level   = info:*
path    = ./log
size    = 10
count   = 10
console = true

#
# Netlistener configuration. Data service specifies how the listen port for the Database server is configured.
# name : A logical name for the netlistener. Mandatory
# role : Which roles can connect to it. The valid roles are client, cluster, agent, or all.
#        cluster - inter communication between the cluster members
#        client  - Any non cluster member, such as Java, GO, Python, Admin clients.
#        Optional. Default is all.
#        There has to be one netlistener with the cluster role.
#
# host : The host name, ip number, or interface name to which netlistener is bound to. (Optional. Default is localhost)
#        To have a single cluster config, use interface name, and have all machines configured identically.
# port : Listening TCP port. (Optional. Default is 8222 for StandAlone, 8225 for Cluster)
# ssl  : Enable SSL communication on this netlistener.
# certificate : Future use, currently only support self signed certificate. (Optional)
# sslTimeout  : SSL HandShake Timeout in sec. Valid values is in the range of [0..60]. Default is 10sec (Optional)
# maxconnections : maximum connections for this tier. Note: Community Edition limited to 5 connections. (Optional)
# sslciphersuite : System wide Cipher to be used for TLS and  encrypted field, and password.
# sslcipherbits  : For DH type the bit strength to use. Minimum is 256.
# sslciphercurve : EC curve name if it is EC based Cipher Suite
# sslcipherexpiry: How long the certificate should be available in years. Minimum is 1.
[netlistener]
name            = analytics
host            = ::
port            = 8223
maxconnections  = 10
ssl             = true
certificate     =
sslTimeout      = 10
sslciphersuite  = AES256-SHA256
sslcipherbits   = 1024
sslciphercurve  = secp521r1
sslcipherexpiry = 1

[netlistener]
name            = oltp
host            = 0.0.0.0
port            = 8222
maxconnections  = 10
ssl             = false


#Specify GPU config parameters
#Specify the list edgeProperties for Analytical Functions such as sssp, pageRank, clustering etc...
#Maximum 15 properties can be specified. It depends on 2 factors,
# number of edges
# GPU memory availability.
# A list of comma, seperated edge weight properies on which GPU based analytical functions can execute. It has to be number (int, float etc)
[gpu]
enable          = false


